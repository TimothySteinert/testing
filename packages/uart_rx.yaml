uart:
  id: uart_bus
  tx_pin: 22
  rx_pin: 21
  baud_rate: 9600
  debug:
    direction: RX
    dummy_receiver: true
    after:
      bytes: 16
    sequence:
      - lambda: |-
          if (bytes.size() != 16) return;

          uint8_t id_byte = bytes[0];
          uint8_t crc_calc = 0x00;
          for (int i = 0; i < 15; i++) crc_calc ^= bytes[i];
          uint8_t crc_recv = bytes[15];
          if (id_byte != 0xA0 || crc_recv != crc_calc) return;

          // Prefix
          std::string prefix;
          for (int i = 1; i <= 3; i++) if (bytes[i] != 0x00) prefix.push_back((char)bytes[i]);
          id(prefix_sensor).publish_state(prefix.c_str());

          // Pin
          std::string pin;
          for (int i = 5; i <= 14; i++) if (bytes[i] != 0x00) pin.push_back((char)bytes[i]);
          id(pin_sensor).publish_state(pin.c_str());

          // Arm mode dispatch
          switch (bytes[4]) {
            case 1:
              id(arm_mode_select).publish_state("Disarm");
              id(arm_handler).execute();
              break;
            case 2:
              id(arm_mode_select).publish_state("Away");
              id(arm_handler).execute();
              break;
            case 3:
              id(arm_mode_select).publish_state("Home");
              id(arm_handler).execute();
              break;
            case 4:
              id(arm_mode_select).publish_state("${custom_mode}");
              id(arm_handler).execute();
              break;
            default:
              id(arm_mode_select).publish_state("None");
              break;
          }
