globals:
  - id: g_backlight_mode
    type: std::string
    restore_value: yes
    initial_value: '"${backlight_mode}"'

  - id: g_backlight_timeout
    type: int
    restore_value: yes
    initial_value: ${backlight_timeout}

# ---- Exposed Controls ----
switch:
  - platform: template
    name: "Automatic Backlight"
    id: automatic_backlight_switch
    lambda: |-
      return id(g_backlight_mode) == "auto";
    turn_on_action:
      - lambda: 'id(g_backlight_mode) = "auto";'
    turn_off_action:
      - lambda: 'id(g_backlight_mode) = "manual";'

number:
  - platform: template
    name: "Backlight Timeout"
    id: backlight_timeout_num
    min_value: 0
    max_value: 600
    step: 1
    restore_value: yes
    initial_value: ${backlight_timeout}
    optimistic: true
    set_action:
      - lambda: |-
          id(g_backlight_timeout) = (int)x;
          ESP_LOGI("backlight", "Timeout set to %d seconds", id(g_backlight_timeout));

# ---- Backlight Light (5 pixels, pins 7â€“11)
light:
  - platform: neopixelbus
    id: backlight_light
    name: "Backlight"
    type: GRB
    pin: GPIO5
    num_leds: 5
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 0.5s
    on_turn_on:
      - if:
          condition:
            lambda: 'return id(g_backlight_mode) == "auto";'
          then:
            - script.execute: auto_backlight_timer

# ---- Auto Timeout Script ----
script:
  - id: auto_backlight_timer
    mode: restart
    then:
      - delay: !lambda "return id(g_backlight_timeout) * 1000;"
      - if:
          condition:
            lambda: 'return id(g_backlight_mode) == "auto";'
          then:
            - light.turn_off: backlight_light
